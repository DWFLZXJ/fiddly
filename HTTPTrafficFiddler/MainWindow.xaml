<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    	xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
    	x:Class="HTTPTrafficFiddler.MainWindow"
	    x:Name="Window"
        Title="Fiddly"
        Height="Auto" Width="577" SizeToContent="WidthAndHeight" Closed="OnClosed" ResizeMode="CanMinimize" Icon="Icons\app.main.ico" Loaded="Window_Loaded">
    <Window.Resources>
        <Style x:Key="FocusVisual">
        	<Setter Property="Control.Template">
        		<Setter.Value>
        			<ControlTemplate>
        				<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="RoundedButton" TargetType="{x:Type Button}">
        	<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        	<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        	<Setter Property="Foreground" Value="#CCFFFFFF"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Padding" Value="1,2"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type Button}">
        				<Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" Background="#FF2E89B2" SnapsToDevicePixels="true" CornerRadius="5">
        					<VisualStateManager.VisualStateGroups>
        						<VisualStateGroup x:Name="CommonStates">
        							<VisualState x:Name="Normal">
        								<Storyboard>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background)" Storyboard.TargetName="border">
        										<DiscreteObjectKeyFrame KeyTime="0">
        											<DiscreteObjectKeyFrame.Value>
        												<SolidColorBrush Color="#FF2E89B2"/>
        											</DiscreteObjectKeyFrame.Value>
        										</DiscreteObjectKeyFrame>
        									</ObjectAnimationUsingKeyFrames>
        								</Storyboard>
        							</VisualState>
        							<VisualState x:Name="MouseOver">
        								<Storyboard>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush)" Storyboard.TargetName="border">
        										<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Null}"/>
        									</ObjectAnimationUsingKeyFrames>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background)" Storyboard.TargetName="border">
        										<DiscreteObjectKeyFrame KeyTime="0">
        											<DiscreteObjectKeyFrame.Value>
        												<SolidColorBrush Color="#FF00344B"/>
        											</DiscreteObjectKeyFrame.Value>
        										</DiscreteObjectKeyFrame>
        									</ObjectAnimationUsingKeyFrames>
        								</Storyboard>
        							</VisualState>
        							<VisualState x:Name="Pressed">
        								<Storyboard>
        									<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background)" Storyboard.TargetName="border">
        										<DiscreteObjectKeyFrame KeyTime="0">
        											<DiscreteObjectKeyFrame.Value>
        												<SolidColorBrush Color="#FF00344B"/>
        											</DiscreteObjectKeyFrame.Value>
        										</DiscreteObjectKeyFrame>
        									</ObjectAnimationUsingKeyFrames>
        								</Storyboard>
        							</VisualState>
        							<VisualState x:Name="Disabled"/>
        						</VisualStateGroup>
        					</VisualStateManager.VisualStateGroups>
        					<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" OverridesDefaultStyle="False"/>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsDefaulted" Value="true">
        						<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="true">
        						<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
        						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
        					</Trigger>
        					<Trigger Property="IsPressed" Value="true">
        						<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
        						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
        					</Trigger>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
        						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
        						<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        	<Setter Property="FontSize" Value="10.667"/>
        </Style>
        <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
        <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
        	<Setter Property="Focusable" Value="false"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ScrollViewer}">
        				<Grid SnapsToDevicePixels="true" Background="{TemplateBinding Background}">
        					<Grid.RowDefinitions>
        						<RowDefinition Height="*"/>
        						<RowDefinition Height="Auto"/>
        					</Grid.RowDefinitions>
        					<Grid.ColumnDefinitions>
        						<ColumnDefinition Width="*"/>
        						<ColumnDefinition Width="Auto"/>
        					</Grid.ColumnDefinitions>
        					<DockPanel Margin="{TemplateBinding Padding}">
        						<ScrollViewer VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Hidden" Focusable="false" DockPanel.Dock="Top">
        							<GridViewHeaderRowPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="2,0,2,0" ColumnHeaderTemplateSelector="{Binding TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" Columns="{Binding TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderTemplate="{Binding TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContextMenu="{Binding TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderStringFormat="{Binding TemplatedParent.View.ColumnHeaderStringFormat, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderToolTip="{Binding TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}" ColumnHeaderContainerStyle="{Binding TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}" AllowsColumnReorder="{Binding TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"/>
        						</ScrollViewer>
        						<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.DirectionalNavigation="Local" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>
        					</DockPanel>
        					<ScrollBar x:Name="PART_HorizontalScrollBar" ViewportSize="{TemplateBinding ViewportWidth}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Row="1" Orientation="Horizontal" Minimum="0.0" Maximum="{TemplateBinding ScrollableWidth}" Cursor="Arrow"/>
        					<ScrollBar x:Name="PART_VerticalScrollBar" ViewportSize="{TemplateBinding ViewportHeight}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Orientation="Vertical" Minimum="0.0" Maximum="{TemplateBinding ScrollableHeight}" Grid.Column="1" Cursor="Arrow"/>
        					<DockPanel Grid.Row="1" LastChildFill="false" Grid.Column="1" Background="{Binding Background, ElementName=PART_VerticalScrollBar}">
        						<Rectangle Width="1" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Fill="White" DockPanel.Dock="Left"/>
        						<Rectangle Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Height="1" Fill="White" DockPanel.Dock="Top"/>
        					</DockPanel>
        				</Grid>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <Style x:Key="ListViewFiddler" TargetType="{x:Type ListView}">
        	<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Foreground" Value="#FF042271"/>
        	<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        	<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        	<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        	<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        	<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        </Style>
        <ContextMenu x:Key="FilterContextMenu">
        	<MenuItem Header="Actions:" IsEnabled="False"/>
        	<Separator/>
        	<MenuItem Header="Edit" Click="FilterEdit_Click">
        		<MenuItem.Icon>
        			<Image Source="Icons\menu.edit.png" />
        		</MenuItem.Icon>
        	</MenuItem>
        	<MenuItem Header="Remove" Click="FilterRemove_Click">
        		<MenuItem.Icon>
        			<Image Source="Icons\menu.delete.png" />
        		</MenuItem.Icon>
        	</MenuItem>
        </ContextMenu>
    	<SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF5593FF"/>
    	<SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="#FFF3F9FF"/>
    	<SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#FF000000"/>
    	<SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF3C77DD"/>
    	<SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="#FFD9ECFF"/>
    	<SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF000000"/>
    	<SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="#FFBCBCBC"/>
    	<SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="#FFE6E6E6"/>
    	<SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#FF707070"/>
    	<SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="#FFFFFFFF"/>
    	<SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="#FF333333"/>
    	<SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#FF333333"/>
    	<Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type ToggleButton}">
    					<Border Padding="{TemplateBinding Padding}">
    						<Grid Background="Transparent" SnapsToDevicePixels="False">
    							<Grid.RowDefinitions>
    								<RowDefinition Height="19"/>
    								<RowDefinition Height="*"/>
    							</Grid.RowDefinitions>
    							<Grid>
    								<Grid.LayoutTransform>
    									<TransformGroup>
    										<TransformGroup.Children>
    											<TransformCollection>
    												<RotateTransform Angle="-90"/>
    											</TransformCollection>
    										</TransformGroup.Children>
    									</TransformGroup>
    								</Grid.LayoutTransform>
    								<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
    								<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
    							</Grid>
    							<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
    						</Grid>
    					</Border>
    					<ControlTemplate.Triggers>
    						<Trigger Property="IsChecked" Value="true">
    							<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
    						</Trigger>
    						<Trigger Property="IsMouseOver" Value="true">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
    						</Trigger>
    						<Trigger Property="IsPressed" Value="true">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
    							<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
    						</Trigger>
    						<Trigger Property="IsEnabled" Value="false">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
    						</Trigger>
    					</ControlTemplate.Triggers>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type ToggleButton}">
    					<Border Padding="{TemplateBinding Padding}">
    						<Grid Background="Transparent" SnapsToDevicePixels="False">
    							<Grid.ColumnDefinitions>
    								<ColumnDefinition Width="19"/>
    								<ColumnDefinition Width="*"/>
    							</Grid.ColumnDefinitions>
    							<Grid>
    								<Grid.LayoutTransform>
    									<TransformGroup>
    										<TransformGroup.Children>
    											<TransformCollection>
    												<RotateTransform Angle="180"/>
    											</TransformCollection>
    										</TransformGroup.Children>
    									</TransformGroup>
    								</Grid.LayoutTransform>
    								<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
    								<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
    							</Grid>
    							<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
    						</Grid>
    					</Border>
    					<ControlTemplate.Triggers>
    						<Trigger Property="IsChecked" Value="true">
    							<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
    						</Trigger>
    						<Trigger Property="IsMouseOver" Value="true">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
    						</Trigger>
    						<Trigger Property="IsPressed" Value="true">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
    							<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
    						</Trigger>
    						<Trigger Property="IsEnabled" Value="false">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
    						</Trigger>
    					</ControlTemplate.Triggers>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type ToggleButton}">
    					<Border Padding="{TemplateBinding Padding}">
    						<Grid Background="Transparent" SnapsToDevicePixels="False">
    							<Grid.RowDefinitions>
    								<RowDefinition Height="19"/>
    								<RowDefinition Height="*"/>
    							</Grid.RowDefinitions>
    							<Grid>
    								<Grid.LayoutTransform>
    									<TransformGroup>
    										<TransformGroup.Children>
    											<TransformCollection>
    												<RotateTransform Angle="90"/>
    											</TransformCollection>
    										</TransformGroup.Children>
    									</TransformGroup>
    								</Grid.LayoutTransform>
    								<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
    								<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
    							</Grid>
    							<ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
    						</Grid>
    					</Border>
    					<ControlTemplate.Triggers>
    						<Trigger Property="IsChecked" Value="true">
    							<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
    						</Trigger>
    						<Trigger Property="IsMouseOver" Value="true">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
    						</Trigger>
    						<Trigger Property="IsPressed" Value="true">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
    							<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
    						</Trigger>
    						<Trigger Property="IsEnabled" Value="false">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
    						</Trigger>
    					</ControlTemplate.Triggers>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<Style x:Key="ExpanderHeaderFocusVisual">
    		<Setter Property="Control.Template">
    			<Setter.Value>
    				<ControlTemplate>
    					<Border>
    						<Rectangle Margin="0" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1" StrokeDashArray="1 2"/>
    					</Border>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type ToggleButton}">
    					<Border Padding="{TemplateBinding Padding}">
    						<Grid Background="Transparent" SnapsToDevicePixels="False">
    							<Grid.ColumnDefinitions>
    								<ColumnDefinition Width="19"/>
    								<ColumnDefinition Width="*"/>
    							</Grid.ColumnDefinitions>
    							<Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}" HorizontalAlignment="Center" Height="19" Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center" Width="19"/>
    							<Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center" SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}" StrokeThickness="2" VerticalAlignment="Center"/>
    							<ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
    						</Grid>
    					</Border>
    					<ControlTemplate.Triggers>
    						<Trigger Property="IsChecked" Value="true">
    							<Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5"/>
    						</Trigger>
    						<Trigger Property="IsMouseOver" Value="true">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Stroke}"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.MouseOver.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}"/>
    						</Trigger>
    						<Trigger Property="IsPressed" Value="true">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Stroke}"/>
    							<Setter Property="StrokeThickness" TargetName="circle" Value="1.5"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Pressed.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Pressed.Arrow.Stroke}"/>
    						</Trigger>
    						<Trigger Property="IsEnabled" Value="false">
    							<Setter Property="Stroke" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Stroke}"/>
    							<Setter Property="Fill" TargetName="circle" Value="{StaticResource Expander.Disabled.Circle.Fill}"/>
    							<Setter Property="Stroke" TargetName="arrow" Value="{StaticResource Expander.Disabled.Arrow.Stroke}"/>
    						</Trigger>
    					</ControlTemplate.Triggers>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<Style x:Key="ExpanderStyleFiddler" TargetType="{x:Type Expander}">
    		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    		<Setter Property="Background" Value="Transparent"/>
    		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
    		<Setter Property="BorderBrush" Value="Transparent"/>
    		<Setter Property="BorderThickness" Value="1"/>
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type Expander}">
    					<Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="3" SnapsToDevicePixels="true">
    						<DockPanel>
    							<ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FocusVisualStyle="{StaticResource ExpanderHeaderFocusVisual}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="10,1,10,11" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
    							<ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0,-10,0,0"/>
    						</DockPanel>
    					</Border>
    					<ControlTemplate.Triggers>
    						<Trigger Property="IsExpanded" Value="true">
    							<Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
    						</Trigger>
    						<Trigger Property="ExpandDirection" Value="Right">
    							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
    							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
    							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
    						</Trigger>
    						<Trigger Property="ExpandDirection" Value="Up">
    							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
    							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
    							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
    						</Trigger>
    						<Trigger Property="ExpandDirection" Value="Left">
    							<Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
    							<Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
    							<Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
    						</Trigger>
    						<Trigger Property="IsEnabled" Value="false">
    							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
    						</Trigger>
    					</ControlTemplate.Triggers>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    	</Style>
    	<SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
    	<SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
    	<SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>
    	<Style x:Key="TextBoxBorderless" TargetType="{x:Type TextBox}">
    		<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
    		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    		<Setter Property="BorderThickness" Value="1"/>
    		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
    		<Setter Property="HorizontalContentAlignment" Value="Left"/>
    		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    		<Setter Property="AllowDrop" Value="true"/>
    		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
    		<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
    		<Setter Property="Template">
    			<Setter.Value>
    				<ControlTemplate TargetType="{x:Type TextBox}">
    					<Border x:Name="border" Background="{TemplateBinding Background}" SnapsToDevicePixels="True" OverridesDefaultStyle="True">
							<ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
    					</Border>
    					<ControlTemplate.Triggers>
    						<Trigger Property="IsEnabled" Value="false">
    							<Setter Property="Opacity" TargetName="border" Value="0.56"/>
    						</Trigger>
    						<Trigger Property="IsMouseOver" Value="true">
    							
    						</Trigger>
    						<Trigger Property="IsKeyboardFocused" Value="true">
    							
    						</Trigger>
    					</ControlTemplate.Triggers>
    				</ControlTemplate>
    			</Setter.Value>
    		</Setter>
    		<Setter Property="BorderBrush" Value="{x:Null}"/>
    		<Style.Triggers>
    			<MultiTrigger>
    				<MultiTrigger.Conditions>
    					<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
    					<Condition Property="IsSelectionActive" Value="false"/>
    				</MultiTrigger.Conditions>
    				<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
    			</MultiTrigger>
    		</Style.Triggers>
    	</Style>
    </Window.Resources>
	<Grid>
		<Rectangle Fill="#FF00344B" Height="52" Margin="0,10,0,0" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" VerticalAlignment="Top" RenderTransformOrigin="0.5,0.5"/>
		<TextBlock HorizontalAlignment="Left" Height="19" Margin="11,33,-2,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="562" Foreground="#7FFFFFFF" FontWeight="Bold"><Run Language="sl-si" Text="FIDDLY, the HTTP traffic fiddler "/><Run FontFamily="Segoe UI Light" Language="sl-si" Text="| NIL &amp; FRI student competition"/></TextBlock>
		<Menu VerticalAlignment="Top">
			<MenuItem Header="_File" Height="20" Margin="5,0,0,0">
				<!-- <MenuItem Header="Load filters" HorizontalAlignment="Left" Padding="0" VerticalContentAlignment="Bottom">
                    <MenuItem.Icon>
                        <Image Source="Icons\menu.open.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Save filters" HorizontalAlignment="Left" VerticalContentAlignment="Center">
                    <MenuItem.Icon>
                        <Image Source="Icons\menu.save.png" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator HorizontalAlignment="Left" Height="0" Width="143.32"/> -->
				<MenuItem Header="Quit" HorizontalAlignment="Left" Width="143" Click="MenuQuit_Click">
					<MenuItem.Icon>
						<Image Source="Icons\menu.quit.png" />
					</MenuItem.Icon>
				</MenuItem>
			</MenuItem>
			<MenuItem Header="_Help" Height="20">
				<MenuItem Header="About" HorizontalAlignment="Left" Width="143" Click="MenuAbout_Click">
					<MenuItem.Icon>
						<Image Source="Icons\menu.about.png" />
					</MenuItem.Icon>
				</MenuItem>
			</MenuItem>
		</Menu>
		<Rectangle Height="318" Margin="-1,62,-1,0" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" VerticalAlignment="Top" Fill="#FFF3F3F3" Stroke="#FFD4D4D4"/>
		<Image Margin="4,68,0,0" Source="Icons/app.interface.png" Stretch="UniformToFill" HorizontalAlignment="Left" VerticalAlignment="Top" Width="30" Height="30"/>
		<TextBlock HorizontalAlignment="Left" Height="22" Margin="35,74,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="160" FontWeight="Bold"><Run Language="sl-si" Text="NETWORK INTERFACE "/></TextBlock>
		<TextBlock HorizontalAlignment="Left" Height="22" Margin="35,143,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="134" FontWeight="Bold"><Run Language="sl-si" Text="HTTP TRAFFIC FILTERS"/></TextBlock>
		<Button x:Name="RButtonAddSimpleFilter" Content="ADD REDIRECT FILTER" HorizontalAlignment="Left" Margin="174,140,0,0" VerticalAlignment="Top" Width="124" Style="{DynamicResource RoundedButton}" FontSize="10.667" Padding="1,2,1,3" Click="RButtonAddRedirectFilter_Click"/>
		<ComboBox Height="24" x:Name="ComboInterfaces" Margin="10,100,10,0" VerticalAlignment="Top" SelectedIndex="0" Text="Network adapter # 1 (192.168.15.0/24)" HorizontalContentAlignment="Stretch" Padding="6,4,5,3"/>
		<Image Margin="6,135,0,0" Source="Icons/app.filter.png" VerticalAlignment="Top" HorizontalAlignment="Left" Stretch="UniformToFill" Width="30" Height="30"/>
		<Button x:Name="ButtonStartStop" Content="Start" HorizontalAlignment="Left" Height="24" Margin="10,392,0,0" VerticalAlignment="Top" Width="90" Click="ButtonStartStop_Click"/>
		<Button x:Name="ButtonCancel" Content="Cancel" HorizontalAlignment="Left" Height="24" Margin="105,392,0,0" VerticalAlignment="Top" Width="90" IsEnabled="False" Visibility="Collapsed"/>
		<TextBlock x:Name="CurrentStatus" HorizontalAlignment="Left" Height="24" Margin="112,395,0,0" TextWrapping="Wrap" VerticalAlignment="Top" Width="373" Foreground="#FF00344B" FontFamily="Segoe UI Semibold"><Run Language="sl-si" Text="Status: traffic fiddler stopped!"/></TextBlock>
		<Expander Header="DEBUG INFORMATION" Margin="-1,430,0,0" VerticalAlignment="Top" FontWeight="Bold" Style="{DynamicResource ExpanderStyleFiddler}">
			<Grid VerticalAlignment="Top" Height="150" Margin="0">
				<Rectangle Fill="#FF00344B" Margin="0,4,0,0" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round"/>
				<TextBox Margin="10,12,10,10" x:Name="DebugInfoBox" TextWrapping="Wrap" Text="[13.07.2013 00:40] - Applied filter &quot;NIL&quot; to request from client &quot;192.168.10.14&quot;&#xA;[19.07.2013 00:40] - Applied filter &quot;NIL&quot; to request from client &quot;192.168.10.14&quot;&#xA;[22.09.2013 23:40] - Applied filter &quot;NIL&quot; to request from client &quot;192.168.10.14&quot;&#xD;&#xA;[13.07.2013 00:40] - Applied filter &quot;NIL&quot; to request from client &quot;192.168.10.14&quot;&#xA;[19.07.2013 00:40] - Applied filter &quot;NIL&quot; to request from client &quot;192.168.10.14&quot;&#xA;[22.09.2013 23:40] - Applied filter &quot;NIL&quot; to request from client &quot;192.168.10.14&quot;&#xD;&#xA;[13.07.2013 00:40] - Applied filter &quot;NIL&quot; to request from client &quot;192.168.10.14&quot;&#xD;&#xA;[13.07.2013 00:40] - Applied filter &quot;NIL&quot; to request from client &quot;192.168.10.14&quot;" Background="{x:Null}" SelectionBrush="#FFEEEEEE" Foreground="#CCFFFFFF" FontWeight="Normal" FontFamily="Segoe UI Symbol" VerticalScrollBarVisibility="Auto" Style="{DynamicResource TextBoxBorderless}" IsReadOnly="True"/>
			</Grid>
		</Expander>
		<ListView x:Name="GridFilters" Margin="10,169,10,0" VerticalAlignment="Top" Height="198" Style="{DynamicResource ListViewFiddler}">
			<ListView.View>
				<GridView>
					<GridViewColumn DisplayMemberBinding="{Binding Name}" Width="100">
						<GridViewColumnHeader Content=" Name" HorizontalContentAlignment="Left" MinHeight="22" Padding="2,0,2,1"/>
					</GridViewColumn>
					<GridViewColumn DisplayMemberBinding="{Binding Description}" Width="410">
						<GridViewColumnHeader Content=" Description" HorizontalContentAlignment="Left" MinHeight="22" Padding="2,0,2,1"/>
					</GridViewColumn>
					<GridViewColumn Width="30">
						<GridViewColumn.CellTemplate>
							<DataTemplate>
								<CheckBox IsChecked="{Binding Enabled}" />
							</DataTemplate>
						</GridViewColumn.CellTemplate>
						<GridViewColumnHeader Content=" St." HorizontalContentAlignment="Left" ToolTip="Status (toggle enabled/disabled)" MinHeight="22" Padding="2,0,2,1"/>
					</GridViewColumn>
				</GridView>
			</ListView.View>
			<ListView.ItemContainerStyle>
				<Style TargetType="{x:Type ListViewItem}">
					<Setter Property="ContextMenu" Value="{StaticResource FilterContextMenu}" />
				</Style>
			</ListView.ItemContainerStyle>
		</ListView>
	</Grid>
</Window>
